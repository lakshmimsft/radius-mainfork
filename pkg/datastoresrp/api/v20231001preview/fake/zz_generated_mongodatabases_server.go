// Licensed under the Apache License, Version 2.0 . See LICENSE in the repository root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/radius-project/radius/pkg/datastoresrp/api/v20231001preview"
	"net/http"
	"net/url"
	"regexp"
)

// MongoDatabasesServer is a fake server for instances of the v20231001preview.MongoDatabasesClient type.
type MongoDatabasesServer struct{
	// BeginCreateOrUpdate is the fake for method MongoDatabasesClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, mongoDatabaseName string, resource v20231001preview.MongoDatabaseResource, options *v20231001preview.MongoDatabasesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[v20231001preview.MongoDatabasesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method MongoDatabasesClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, mongoDatabaseName string, options *v20231001preview.MongoDatabasesClientBeginDeleteOptions) (resp azfake.PollerResponder[v20231001preview.MongoDatabasesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method MongoDatabasesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, mongoDatabaseName string, options *v20231001preview.MongoDatabasesClientGetOptions) (resp azfake.Responder[v20231001preview.MongoDatabasesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByScopePager is the fake for method MongoDatabasesClient.NewListByScopePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByScopePager func(options *v20231001preview.MongoDatabasesClientListByScopeOptions) (resp azfake.PagerResponder[v20231001preview.MongoDatabasesClientListByScopeResponse])

	// ListSecrets is the fake for method MongoDatabasesClient.ListSecrets
	// HTTP status codes to indicate success: http.StatusOK
	ListSecrets func(ctx context.Context, mongoDatabaseName string, body map[string]any, options *v20231001preview.MongoDatabasesClientListSecretsOptions) (resp azfake.Responder[v20231001preview.MongoDatabasesClientListSecretsResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method MongoDatabasesClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, mongoDatabaseName string, properties v20231001preview.MongoDatabaseResourceUpdate, options *v20231001preview.MongoDatabasesClientBeginUpdateOptions) (resp azfake.PollerResponder[v20231001preview.MongoDatabasesClientUpdateResponse], errResp azfake.ErrorResponder)

}

// NewMongoDatabasesServerTransport creates a new instance of MongoDatabasesServerTransport with the provided implementation.
// The returned MongoDatabasesServerTransport instance is connected to an instance of v20231001preview.MongoDatabasesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMongoDatabasesServerTransport(srv *MongoDatabasesServer) *MongoDatabasesServerTransport {
	return &MongoDatabasesServerTransport{
		srv: srv,
		beginCreateOrUpdate: newTracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientCreateOrUpdateResponse]](),
		beginDelete: newTracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientDeleteResponse]](),
		newListByScopePager: newTracker[azfake.PagerResponder[v20231001preview.MongoDatabasesClientListByScopeResponse]](),
		beginUpdate: newTracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientUpdateResponse]](),
	}
}

// MongoDatabasesServerTransport connects instances of v20231001preview.MongoDatabasesClient to instances of MongoDatabasesServer.
// Don't use this type directly, use NewMongoDatabasesServerTransport instead.
type MongoDatabasesServerTransport struct {
	srv *MongoDatabasesServer
	beginCreateOrUpdate *tracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientCreateOrUpdateResponse]]
	beginDelete *tracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientDeleteResponse]]
	newListByScopePager *tracker[azfake.PagerResponder[v20231001preview.MongoDatabasesClientListByScopeResponse]]
	beginUpdate *tracker[azfake.PollerResponder[v20231001preview.MongoDatabasesClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for MongoDatabasesServerTransport.
func (m *MongoDatabasesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MongoDatabasesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		 if mongoDatabasesServerTransportInterceptor != nil {
			 res.resp, res.err, intercepted = mongoDatabasesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MongoDatabasesClient.BeginCreateOrUpdate":
				res.resp, res.err = m.dispatchBeginCreateOrUpdate(req)
			case "MongoDatabasesClient.BeginDelete":
				res.resp, res.err = m.dispatchBeginDelete(req)
			case "MongoDatabasesClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "MongoDatabasesClient.NewListByScopePager":
				res.resp, res.err = m.dispatchNewListByScopePager(req)
			case "MongoDatabasesClient.ListSecrets":
				res.resp, res.err = m.dispatchListSecrets(req)
			case "MongoDatabasesClient.BeginUpdate":
				res.resp, res.err = m.dispatchBeginUpdate(req)
				default:
		res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MongoDatabasesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := m.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases/(?P<mongoDatabaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[v20231001preview.MongoDatabaseResource](req)
	if err != nil {
		return nil, err
	}
	mongoDatabaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mongoDatabaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.BeginCreateOrUpdate(req.Context(), mongoDatabaseNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginCreateOrUpdate = &respr
		m.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		m.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		m.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (m *MongoDatabasesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := m.beginDelete.get(req)
	if beginDelete == nil {
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases/(?P<mongoDatabaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	mongoDatabaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mongoDatabaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.BeginDelete(req.Context(), mongoDatabaseNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginDelete = &respr
		m.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		m.beginDelete.remove(req)
	}

	return resp, nil
}

func (m *MongoDatabasesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases/(?P<mongoDatabaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	mongoDatabaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mongoDatabaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), mongoDatabaseNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MongoDatabaseResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MongoDatabasesServerTransport) dispatchNewListByScopePager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListByScopePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByScopePager not implemented")}
	}
	newListByScopePager := m.newListByScopePager.get(req)
	if newListByScopePager == nil {
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
resp := m.srv.NewListByScopePager(nil)
		newListByScopePager = &resp
		m.newListByScopePager.add(req, newListByScopePager)
		server.PagerResponderInjectNextLinks(newListByScopePager, req, func(page *v20231001preview.MongoDatabasesClientListByScopeResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByScopePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListByScopePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByScopePager) {
		m.newListByScopePager.remove(req)
	}
	return resp, nil
}

func (m *MongoDatabasesServerTransport) dispatchListSecrets(req *http.Request) (*http.Response, error) {
	if m.srv.ListSecrets == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListSecrets not implemented")}
	}
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases/(?P<mongoDatabaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listSecrets`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[map[string]any](req)
	if err != nil {
		return nil, err
	}
	mongoDatabaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mongoDatabaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.ListSecrets(req.Context(), mongoDatabaseNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MongoDatabaseListSecretsResult, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MongoDatabasesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := m.beginUpdate.get(req)
	if beginUpdate == nil {
	const regexStr = `/(?P<rootScope>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Applications\.Datastores/mongoDatabases/(?P<mongoDatabaseName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[v20231001preview.MongoDatabaseResourceUpdate](req)
	if err != nil {
		return nil, err
	}
	mongoDatabaseNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("mongoDatabaseName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.BeginUpdate(req.Context(), mongoDatabaseNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginUpdate = &respr
		m.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		m.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		m.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to MongoDatabasesServerTransport
var mongoDatabasesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
